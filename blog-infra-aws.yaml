AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  CidrVpc:
    Description: Ip range for entire VPC
    Type: String

  CidrPublicOne:
    Description: Ip range for public subnet one
    Type: String

  CidrPublicTwo:
    Description: Ip range for public subnet two
    Type: String

  CidrPrivateOne:
    Description: Ip range for private subnet one
    Type: String

  CidrPrivateTwo:
    Description: Ip range for private subnet two
    Type: String


  AzSubnetOne:
    Description: AZ where live the subnet public one and private one
    Type: String
    Default: us-east-2a

  AzSubnetTwo:
    Description: AZ where live the subnet public two and private two
    Type: String
    Default: us-east-2b

  IpLaunchPublicSubnet:
    Description: If this valie is true allow that the resources will be launched with public ip
    Type: String
    Default: True
    AllowedValues:
      - true 
      - false

  IpLaunchPrivateSubnet:
    Description: If this value is false it doesn't allow that the resources will be launched with public ip
    Type: String
    Default: false
    AllowedValues:
      - true 
      - false

  DbName:
    Description: Name of the database
    Type: String
    
  DbAllocatedStorage:
    Description: Storage to database in GB
    Type: Number
    ConstraintDescription: The storage cannot be less than 20 or greater than 30
    Default: 20
    MinValue: 20
    MaxValue: 30

  DbInstanceClass:
    Description: Instances class, type of instance
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small

  DbEngine:
    Description: Engine of database
    Type: String
    Default: postgres

  DbUsername:
    Description: Master Username
    Type: String
    MaxLength: 10
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    NoEcho: true

  DbMasterUserPassword:
    Description: Master user password
    Type: String
    MinLength: 8
    NoEcho: true

  DbBackupRetentionPeriod:
    Description: Quantity of day for ratain backups
    Type: Number
    Default: 0
  
  DbMultiAz:
    Description: Hight availabity more than 1 AZ and value as true.
    ConstraintDescription: If the value is false you to have to specified Availability Zone en DB
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  DbDeletionPolicy:
    Description: What happend with this resource when the stack is deteted
    Type: String
    Default: Delete
    AllowedValues:
      - Delete
      - Retain
      - Snapshot

  DbPubliclyAccessible:
    Description: Database accesible from ethernet or not? If the database is on a private subnet this parameter doesn't effect althought the value is true.
    Type: String
    Default: false
    AllowedValues:
      - false
      - true # only for public database

Resources:
  VpcOwn:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      EnableDnsSupport: True
      CidrBlock: # 10.0.0.0/24 IPs: 10.0.0.0 - 10.0.0.255
         Ref: CidrVpc

  SubnetPublicOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: # 10.0.0.0/26  (IPs: 10.0.0.0 - 10.0.0.63)
        Ref: CidrPublicOne
      AvailabilityZone: # us-east-2a
        Ref: AzSubnetOne
      MapPublicIpOnLaunch: # true: Asignacion de ip publica automaticamente
        Ref: IpLaunchPublicSubnet
      VpcId:
        Ref: VpcOwn

  SubnetPublicTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: # 10.0.0.64/26 IPs: 10.0.0.64 - 10.0.0.127
        Ref: CidrPublicTwo
      AvailabilityZone: # us-east-2b
        Ref: AzSubnetTwo
      MapPublicIpOnLaunch: # true: Asignacion de ip publica automaticamente
        Ref: IpLaunchPublicSubnet
      VpcId:
        Ref: VpcOwn

  SubnetPrivateOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: # 10.0.0.128/26  IPs: 10.0.0.128 - 10.0.0.191
        Ref: CidrPrivateOne
      AvailabilityZone: # us-east-2a
        Ref: AzSubnetOne
      MapPublicIpOnLaunch: # false: No asigna direccion ip automaticamente
        Ref: IpLaunchPrivateSubnet
      VpcId:
        Ref: VpcOwn

  SubnetPrivateTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: # 10.0.0.192/26 IPs: 10.0.0.192 - 10.0.0.255
        Ref: CidrPrivateTwo
      AvailabilityZone: # us-east-2b
        Ref: AzSubnetTwo
      MapPublicIpOnLaunch: # false
        Ref: IpLaunchPrivateSubnet
      VpcId:
        Ref: VpcOwn

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: creator
        Value: javidec

  InternetGatewayAttachVpcOwn:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VpcOwn

  NATGatewayEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachVpcOwn # Espera a que exista una IGW Adjunta, una NAT tiene sentido si existe conexion a internet
    Properties:
      ConnectivityType: public
      SubnetId:
        Ref: SubnetPublicOne
      AllocationId:
        Fn::GetAtt: [NATGatewayEIP, AllocationId]


  RoutetablePublicSubnets:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VpcOwn


  TableAssociationPublicOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePublicSubnets
      SubnetId:
        Ref: SubnetPublicOne

  TableAssociationPublicTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePublicSubnets
      SubnetId:
        Ref: SubnetPublicTwo

  RouteFromPublicsToIgw:
    Type: AWS::EC2::Route
    DependsOn:  InternetGateway
    Properties:
      RouteTableId:
        Ref: RoutetablePublicSubnets
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  
  
  RoutetablePrivateSubnets:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VpcOwn
  
  TableAssociationPrivateOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePrivateSubnets
      SubnetId:
        Ref: SubnetPrivateOne

  TableAssociationPrivateTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePrivateSubnets
      SubnetId:
        Ref: SubnetPrivateTwo

  RouteFromPrivatesToNat:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId:
        Ref: RoutetablePrivateSubnets
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway


  SubnetsGroupToDataBase:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The subnets to launch DB instances
      DBSubnetGroupName: String
      SubnetIds: 
        - Ref: SubnetPrivateOne
        - Ref: SubnetPrivateTwo
      
  SecurityGroupDataBase:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Trafic allowed to Database
      VpcId:
        Ref: VpcOwn
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          CidrIp: 10.0.0.0/24 # Paraetrizar or get this value with a function
          FromPort: 5432
          ToPort: 5432
          

  SecurityGroupAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP connection from all origins
      VpcId:
        Ref: VpcOwn
      SecurityGroupIngress:
        - 
          Ipprotocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80

  SecurityGroupAsg:
    # Este SG debe ser referenciado desde el Launch Template
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP connection from all origins
      VpcId:
        Ref: VpcOwn
      SecurityGroupIngress:
        - 
          Ipprotocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: SecurityGroupAlb


  DbBlog:
    Type: AWS::RDS::DBInstance
    DeletionPolicy:
      Ref: DbDeletionPolicy
    Properties:
      DBName:
        Ref: DbName
      AllocatedStorage:
        Ref: DbAllocatedStorage
      BackupRetentionPeriod:
        Ref: DbBackupRetentionPeriod
      DBInstanceClass:
        Ref: DbInstanceClass
      Engine:
        Ref: DbEngine
      MasterUsername:
        Ref: DbUsername
      MasterUserPassword:
        Ref: DbMasterUserPassword
      MultiAZ:
        Ref: DbMultiAz
      PubliclyAccessible:
        Ref: DbPubliclyAccessible
      DBSubnetGroupName:
        Ref: SubnetsGroupToDataBase
      VPCSecurityGroups:
        - Ref: SecurityGroupDataBase

  AlbBlog:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application # Type of load balancer
      IpAddressType: ipv4
      Scheme: internet-facing # Parametrizar
      SecurityGroups:
        - Ref: SecurityGroupAlb
      Subnets:
        - Ref: SubnetPublicOne # AZ 2a
        - Ref: SubnetPublicTwo # AZ 2B

  ListenerAlbBlog:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn:
        Ref: AlbBlog
      DefaultActions: # Manejo de solicitudes si no ninguna regla coincide con la solicitud o si no existe ninguna regls que evaluar
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroupBlog

  TargetGroupBlog:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Protocol: HTTP
      Port: 80
      ProtocolVersion: HTTP1
      IpAddressType: ipv4
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      VpcId:
        Ref: VpcOwn


