AWSTemplateFormatVersion: "2010-09-09"

Resources:
  VpcOwn:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24 # IPs: 10.0.0.0 - 10.0.0.255
      EnableDnsHostnames: True
      EnableDnsSupport: True

  SubnetPublicOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/26 # (IPs: 10.0.0.0 - 10.0.0.63)
      AvailabilityZone: us-east-2a
      MapPublicIpOnLaunch: true # Asignacion de ip publica automaticamente
      VpcId:
        Ref: VpcOwn

  SubnetPublicTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.64/26 # IPs: 10.0.0.64 - 10.0.0.127
      AvailabilityZone: us-east-2b
      MapPublicIpOnLaunch: true # Asignacion de ip publica automaticamente
      VpcId:
        Ref: VpcOwn

  SubnetPrivateOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.128/26 # IPs: 10.0.0.128 - 10.0.0.191
      AvailabilityZone: us-east-2a
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VpcOwn

  SubnetPrivateTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.192/26 # IPs: 10.0.0.192 - 10.0.0.255
      AvailabilityZone: us-east-2b
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VpcOwn

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: creator
        Value: javidec

  InternetGatewayAttachVpcOwn:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VpcOwn

  NATGatewayEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachVpcOwn # Espera a que exista una IGW Adjunta, una NAT tiene sentido si existe conexion a internet
    Properties:
      ConnectivityType: public
      SubnetId:
        Ref: SubnetPublicOne
      AllocationId:
        Fn::GetAtt: [NATGatewayEIP, AllocationId]


  RoutetablePublicSubnets:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VpcOwn


  TableAssociationPublicOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePublicSubnets
      SubnetId:
        Ref: SubnetPublicOne

  TableAssociationPublicTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePublicSubnets
      SubnetId:
        Ref: SubnetPublicTwo

  RouteFromPublicsToIgw:
    Type: AWS::EC2::Route
    DependsOn:  InternetGateway
    Properties:
      RouteTableId:
        Ref: RoutetablePublicSubnets
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  
  
  RoutetablePrivateSubnets:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VpcOwn
  
  TableAssociationPrivateOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePrivateSubnets
      SubnetId:
        Ref: SubnetPrivateOne

  TableAssociationPrivateTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RoutetablePrivateSubnets
      SubnetId:
        Ref: SubnetPrivateTwo

  RouteFromPrivatesToNat:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId:
        Ref: RoutetablePrivateSubnets
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway


  SubnetsGroupToDataBase:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The subnets to launch DB instances
      DBSubnetGroupName: String
      SubnetIds: 
        - Ref: SubnetPrivateOne
        - Ref: SubnetPrivateTwo
      
  SecurityGroupDataBase:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Trafic allowed to Database
      VpcId:
        Ref: VpcOwn
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          CidrIp: 10.0.0.0/24
          FromPort: 5432
          ToPort: 5432
          

  DbBlog:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: blogdb
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: javidev
      MasterUserPassword: 12345678
      MultiAZ: true
      PubliclyAccessible: false
      DBSubnetGroupName:
        Ref: SubnetsGroupToDataBase
      VPCSecurityGroups:
        - Ref: SecurityGroupDataBase